name: "Terraform Infrastructure Change Management"

on:
  push:
    paths:
      - "infra/**"
      - ".github/workflows/terraform.yml"
    branches:
      - master
  pull_request:
    paths:
      - "infra/**"
      - ".github/workflows/terraform.yml"
    branches:
      - master

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: "./infra"
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

        # Install the latest version of Terraform CLI and configure the Terraform CLI configuration.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: 1.4.7

      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          AWS_REGION: "eu-north-1"
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          AWS_REGION: "eu-north-1"
          TF_VAR_postgres_user: ${{secrets.PROD_DB_USERNAME}}
          TF_VAR_postgres_pass: ${{secrets.PROD_DB_PASSWORD}}
          TF_VAR_postgres_db: stagnum
          TF_VAR_aws_access_key: ${{secrets.AWS_ACCESS_KEY_ID}}
          TF_VAR_aws_secret_key: ${{secrets.AWS_ACCESS_KEY_SECRET}}
          TF_VAR_spotify_client_id: ${{secrets.SPOTIFY_CLIENT_ID}}
          TF_VAR_spotify_client_secret: ${{secrets.SPOTIFY_CLIENT_SECRET}}
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      # Save plan to artifacts
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        env:
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API }}
          TF_VAR_rcon_pass: ${{ secrets.RCON_PASS }}
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      # If this is a PR post the changes
      - name: Push Terraform Output to PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v6
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

  terraform-apply:
    name: "Terraform Apply from plan"
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    needs: [terraform-plan]

    defaults:
      run:
        working-directory: "./infra"
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

        # Install the latest version of Terraform CLI and configure the Terraform CLI configuration.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: 1.4.7

      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          AWS_REGION: "eu-north-1"
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Download saved plan from artifacts
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          AWS_REGION: "eu-north-1"
          TF_VAR_postgres_user: ${{secrets.PROD_DB_USERNAME}}
          TF_VAR_postgres_pass: ${{secrets.PROD_DB_PASSWORD}}
          TF_VAR_postgres_db: stagnum
          TF_VAR_aws_access_key: ${{secrets.AWS_ACCESS_KEY_ID}}
          TF_VAR_aws_secret_key: ${{secrets.AWS_ACCESS_KEY_SECRET}}
          TF_VAR_spotify_client_id: ${{secrets.SPOTIFY_CLIENT_ID}}
          TF_VAR_spotify_client_secret: ${{secrets.SPOTIFY_CLIENT_SECRET}}
        run: terraform apply -auto-approve tfplan
